datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

enum Role {
  CUSTOMER
  USER
  ADMIN
  SUPERADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role            @default(CUSTOMER)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  addresses     Address[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order Order[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}


model Product {
  id              String                @id
  name            String
  price           Float
  description     String
  mainImage       String
  rating          Float
  inStock         Boolean               @default(true)
  discount        Int                   @default(0)
  category        String?
  code            String?
  isPromotion     Boolean               @default(false)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  
  // Relations
  specifications  ProductSpecification[]
  variants        ProductVariant[]
  additionalImages ProductImage[]

  OrderItem OrderItem[]
}

model ProductSpecification {
  id        String   @id @default(uuid())
  key       String
  value     String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model ProductVariant {
  id        String   @id @default(uuid())
  color     String
  size      String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}


model Address {
  id            String   @id @default(uuid())
  userId        String
  street        String
  number        String
  complement    String?
  neighborhood  String
  city          String
  state         String
  country       String
  zipCode       String
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  Order Order[]
}

model OrderItem {
  id            String   @id @default(uuid())
  orderId       String
  productId     String
  quantity      Int
  price         Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}



model Order {
  id            String   @id @default(uuid())
  userId        String
  addressId     String
  totalAmount   Float
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  OrderItem OrderItem[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  address Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
}
