generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  identifier    String?         @unique
  email         String          @unique
  name          String?
  createdAt     DateTime        @default(now())
  emailVerified DateTime?
  image         String?
  updatedAt     DateTime        @updatedAt
  role          Role            @default(CUSTOMER)
  password      String
  accounts      Account[]
  addresses     Address[]
  Authenticator Authenticator[]
  Order         Order[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id
  token      String
  expires    DateTime
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Product {
  id             String                 @id
  name           String
  price          Float
  description    String
  category       String?
  code           String?
  rating         Float
  inStock        Boolean                @default(true)
  discount       Int                    @default(0)
  isPromotion    Boolean                @default(false)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  image          String
  images         ProductImage[]
  OrderItem      OrderItem[]
  specifications ProductSpecification[]
  variants       ProductVariant[]
}

model ProductSpecification {
  id        String  @id @default(uuid())
  key       String
  value     String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductVariant {
  id        String  @id @default(uuid())
  color     String
  size      String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Address {
  id           String   @id @default(uuid())
  userId       String
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  country      String
  zipCode      String
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Order        Order[]
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  productId   String
  quantity    Int
  price       Float
  discount    Int
  total       Float
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  addressId   String
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  address     Address     @relation(fields: [addressId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  OrderItem   OrderItem[]
}

model BannerImages {
  id          String   @id @default(uuid())
  title       String
  description String
  images      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Role {
  CUSTOMER
  USER
  ADMIN
  SUPERADMIN
}


model Footer {
  id                  Int      @id @default(autoincrement())
  companyName         String   // Auto Peças Express
  companyDescription  String   // Sua loja completa de auto peças...
  
  // Contato
  phone               String   // (11) 1234-5678
  email               String   // contato@autopecasexpress.com.br
  address             String   // Av. das Autopeças, 1000 - São Paulo/SP
  
  // Horário de funcionamento
  weekdayHours        String   // Segunda a Sexta: 08:00 - 18:00
  saturdayHours       String   // Sábado: 08:00 - 13:00
  
  copyrightText       String   // © 2025 Auto Peças Express. Todos os direitos reservados.
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}